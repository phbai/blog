<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>phbai&#39;s blog</title>
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://www.phbai.com/"/>
  <updated>2017-01-07T14:00:10.000Z</updated>
  <id>http://www.phbai.com/</id>
  
  <author>
    <name>Phbai</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>博客所用技术</title>
    <link href="http://www.phbai.com/2017/01/07/%E5%8D%9A%E5%AE%A2%E6%89%80%E7%94%A8%E6%8A%80%E6%9C%AF/"/>
    <id>http://www.phbai.com/2017/01/07/博客所用技术/</id>
    <published>2017-01-07T13:58:51.000Z</published>
    <updated>2017-01-07T14:00:10.000Z</updated>
    
    <content type="html"><![CDATA[<p>本来去年自己动手写一个博客，但拖到现在还没完成。</p>
<a id="more"></a>
<p>本博客所用技术一览：</p>
<ul>
<li>koa2</li>
<li>hexo</li>
</ul>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;本来去年自己动手写一个博客，但拖到现在还没完成。&lt;/p&gt;
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>2016年总结</title>
    <link href="http://www.phbai.com/2017/01/01/2016%E5%B9%B4%E6%80%BB%E7%BB%93/"/>
    <id>http://www.phbai.com/2017/01/01/2016年总结/</id>
    <published>2017-01-01T13:30:07.000Z</published>
    <updated>2017-01-07T14:02:38.000Z</updated>
    
    <content type="html"><![CDATA[<p>很快2016年就过去了，回顾这一年学到了不少东西。</p>
<a id="more"></a>
<p>从3月28号第一天到公司实习，那时候什么对我都是新鲜的。当时进入的是技术体系，带我的人让我做的项目是一个后台管理系统，主要用到的是<code>Bootstrap</code> 和 <code>jQuery</code>。当时也没用模板，页面直接都是.php文件写的，用的<code>twig</code>粘起来的。比如</p>
<figure class="highlight php"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">&lt;<span class="keyword">include</span> <span class="string">"header.php"</span>&gt;</div><div class="line">&lt;<span class="keyword">include</span> <span class="string">"footer.php"</span>&gt;</div><div class="line"></div><div class="line">&#123;&#123; extends <span class="string">"template.php"</span>&#125;&#125;</div></pre></td></tr></table></figure>
<p>当时，我刚好学过<code>Django</code>，里面的模板引擎长的和<code>twig</code>一模一样，所以驾轻就熟很快就适应了。但是这种方式毕竟有点原始，还处在刀耕火种的时代。我向带我的人提出了使用<code>webpack</code>和<code>vue.js</code> 的组件化的开发方式。但似乎是因为我刚来的缘故，她也没放在心上。</p>
<p>后来就这么干到了6月底，我刚拿了学位证从学校回来，领导把我调到了产品部门，里面用的就是<code>webpack</code>和<code>vue.js</code>的方式，不过好像缺少开发经验，前面的人挖了不少的坑，而且我当时也不熟悉组件化怎么开发，一直到12月份，我才慢慢适应过来。不过由于项目早期的决策失误，到现在好像也没法改了，比如没有使用<code>vue</code>封装的框架、没有使用<code>vuex</code>管理组件状态、组件设计有问题等等。</p>
<p>16年从刚进公司只会<code>Boostrap</code>和<code>jQuery</code>到现在的会使用<code>vue.js</code>、<code>webpack</code>、<code>stylus</code>等等，我成长了许多。</p>
<p>17年我还有许多要学习的地方，制定了几个微小的目标。</p>
<ul>
<li>haskell</li>
<li>Go</li>
<li>继续提高审美</li>
<li>提高科学上网能力</li>
</ul>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;很快2016年就过去了，回顾这一年学到了不少东西。&lt;/p&gt;
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>给你的网站加上Https</title>
    <link href="http://www.phbai.com/2016/05/07/%E7%BB%99%E4%BD%A0%E7%9A%84%E7%BD%91%E7%AB%99%E5%8A%A0%E4%B8%8AHttps/"/>
    <id>http://www.phbai.com/2016/05/07/给你的网站加上Https/</id>
    <published>2016-05-07T08:44:48.000Z</published>
    <updated>2017-01-07T14:09:30.000Z</updated>
    
    <content type="html"><![CDATA[<p>无论是手机还是PC上网的时候，如果网站采用的是普通的Http网站，可能会被运营商劫持，并在相应页面加上广告。</p>
<a id="more"></a>
<h3 id="使用Https的好处"><a href="#使用Https的好处" class="headerlink" title="使用Https的好处"></a>使用Https的好处</h3><p>以前用http协议的时候，等于互联网公司给用户寄货，但随便选个包装然后让运营商配送给用户。运营商公司为了自己的利益，把包装拆开，在里面塞满了各种广告。甚至有可能，用户就买本书，结果包装里被运营商塞了整整一箱传单或者小卡片送了过去。甚至可能是下面的这种卡片。</p>
<p><img src="http://r6.loli.io/BjMR7b.png" alt="enter image description here"></p>
<p>现在开始使用https协议了，互联网公司给用户寄货，不过这次选了一个保险箱给与用户寄货，开箱密码通过另外的渠道告诉用户，然后让运营商给用户配送过去。虽然这样成本高了很多，但是终于安全了。</p>
<h3 id="搭建准备"><a href="#搭建准备" class="headerlink" title="搭建准备"></a>搭建准备</h3><ul>
<li>Nginx</li>
<li>Git</li>
</ul>
<p><strong>安装 nginx</strong></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">sudo apt-get install nginx</div></pre></td></tr></table></figure>
<p><strong>安装 Git</strong></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">sudo apt-get install git</div></pre></td></tr></table></figure>
<h3 id="开始搭建"><a href="#开始搭建" class="headerlink" title="开始搭建"></a>开始搭建</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">git clone https://github.com/letsencrypt/letsencrypt</div></pre></td></tr></table></figure>
<p>进入相应文件夹，执行如下命令</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">./letsencrypt-auto certonly</div></pre></td></tr></table></figure>
<p>会有一段时间的下载，完成后出现下图<br><img src="https://scarletmu.b0.upaiyun.com/blog/7524c1924522dcdf47190ebef0db5afc.png" alt="enter image description here"></p>
<p>这里选择第二项，输入域名<br><img src="https://scarletmu.b0.upaiyun.com/blog/67aa65fd8990649bf5a251494a53e33c.png" alt="enter image description here"></p>
<p>然后输入要绑定的域名,域名检测完毕之后同意他的协议即可,然后就会结束图形界面,提示成功啦!</p>
<p>到这里我们的Let’s Encrypt证书就创建完成了</p>
<p>为了提升安全性,我们需要建立Diffie-Hellman密钥,这里根据CPU性能不同要花不少时间</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">openssl dhparam -out /etc/ssl/certs/dhparam.pem 2048</div></pre></td></tr></table></figure>
<p><strong>完成后进入nginx.conf进行配置</strong></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div></pre></td><td class="code"><pre><div class="line">server&#123;</div><div class="line">    listen 443 ssl;</div><div class="line">    </div><div class="line">    server_name 域名;</div><div class="line">    // 引入证书,提示成功时会给你证书的位置</div><div class="line">    ssl_certificate /etc/letsencrypt/live/使用的域名/fullchain.pem;</div><div class="line">    ssl_certificate_key /etc/letsencrypt/live/使用的域名/privkey.pem;</div><div class="line">        </div><div class="line">    ssl_protocols TLSv1 TLSv1.1 TLSv1.2;</div><div class="line">    ssl_prefer_server_ciphers on;</div><div class="line">    ssl_dhparam /etc/ssl/certs/dhparam.pem;</div><div class="line">    ssl_ciphers &apos;ECDHE-RSA-AES128-GCM-SHA256:ECDHE-ECDSA-AES128-GCM-SHA256:ECDHE-RSA-AES256-GCM-SHA384:ECDHE-ECDSA-AES256-GCM-SHA384:DHE-RSA-AES128-GCM-SHA256:DHE-DSS-AES128-GCM-SHA256:kEDH+AESGCM:ECDHE-RSA-AES128-SHA256:ECDHE-ECDSA-AES128-SHA256:ECDHE-RSA-AES128-SHA:ECDHE-ECDSA-AES128-SHA:ECDHE-RSA-AES256-SHA384:ECDHE-ECDSA-AES256-SHA384:ECDHE-RSA-AES256-SHA:ECDHE-ECDSA-AES256-SHA:DHE-RSA-AES128-SHA256:DHE-RSA-AES128-SHA:DHE-DSS-AES128-SHA256:DHE-RSA-AES256-SHA256:DHE-DSS-AES256-SHA:DHE-RSA-AES256-SHA:AES128-GCM-SHA256:AES256-GCM-SHA384:AES128-SHA256:AES256-SHA256:AES128-SHA:AES256-SHA:AES:CAMELLIA:DES-CBC3-SHA:!aNULL:!eNULL:!EXPORT:!DES:!RC4:!MD5:!PSK:!aECDH:!EDH-DSS-DES-CBC3-SHA:!EDH-RSA-DES-CBC3-SHA:!KRB5-DES-CBC3-SHA&apos;;</div><div class="line">    ssl_session_timeout 1d;</div><div class="line">    ssl_session_cache shared:SSL:50m;</div><div class="line">    ssl_stapling on;</div><div class="line">    ssl_stapling_verify on;</div><div class="line">    add_header Strict-Transport-Security max-age=15768000;</div><div class="line">    location / &#123;</div><div class="line">        // 反代信息</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line">// 80端口重定向至443端口</div><div class="line">server &#123;</div><div class="line">    listen 80;</div><div class="line">    server_name 域名;</div><div class="line">    return 301 https://$host$request_uri;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="重启nginx服务器"><a href="#重启nginx服务器" class="headerlink" title="重启nginx服务器"></a>重启nginx服务器</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">sudo service nginx restart</div></pre></td></tr></table></figure>
<p>至此https已经搭建好了，你可以去 <a href="https://www.ssllabs.com/ssltest/analyze.html" target="_blank" rel="external">ssllab</a> 测试自己网站的https强度。一般通过Let’s encrypt提供的SSL证书都是A+级别。</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;无论是手机还是PC上网的时候，如果网站采用的是普通的Http网站，可能会被运营商劫持，并在相应页面加上广告。&lt;/p&gt;
    
    </summary>
    
    
      <category term="nginx" scheme="http://www.phbai.com/tags/nginx/"/>
    
      <category term="let&#39;s encrypt" scheme="http://www.phbai.com/tags/let-s-encrypt/"/>
    
      <category term="https" scheme="http://www.phbai.com/tags/https/"/>
    
  </entry>
  
  <entry>
    <title>Django部署nginx</title>
    <link href="http://www.phbai.com/2016/04/27/Django%E9%83%A8%E7%BD%B2nginx/"/>
    <id>http://www.phbai.com/2016/04/27/Django部署nginx/</id>
    <published>2016-04-27T14:52:19.000Z</published>
    <updated>2017-01-07T13:28:32.000Z</updated>
    
    <content type="html"><![CDATA[<p>Django自带的 python manage.py runserver只提供测试用，到了实际生产环境中，需要使用nginx要做请求转发。</p>
<a id="more"></a>
<h3 id="运行环境"><a href="#运行环境" class="headerlink" title="运行环境"></a>运行环境</h3><ul>
<li>Ubuntu 14.1</li>
<li>Python 2.7.10</li>
<li>Django 1.9.5</li>
</ul>
<h3 id="搭建准备"><a href="#搭建准备" class="headerlink" title="搭建准备"></a>搭建准备</h3><p><strong>首先更新下 apt-get</strong></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">sudo apt-get update</div></pre></td></tr></table></figure>
<p><strong>安装 nginx</strong></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">sudo apt-get install nginx</div></pre></td></tr></table></figure>
<p><strong>修改 nginx配置文件信息，下面以 baidu.com 举例。</strong></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">vim /etc/nginx/sites-available/baidu</div></pre></td></tr></table></figure>
<p><strong>修改信息为如下</strong></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line"># the nginx server instance</div><div class="line">server &#123;</div><div class="line">    listen 0.0.0.0:80;</div><div class="line"></div><div class="line">    server_name baidu.com baidu;</div><div class="line">    access_log /var/log/nginx/baidu.log;</div><div class="line"></div><div class="line">    location / &#123;</div><div class="line">      proxy_set_header Host $host;</div><div class="line">      proxy_set_header X-Real-IP $remote_addr;</div><div class="line">      proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;</div><div class="line"></div><div class="line">      proxy_pass http://127.0.0.1:8000/;</div><div class="line">      proxy_redirect off;</div><div class="line">    &#125;</div><div class="line"> &#125;</div></pre></td></tr></table></figure>
<p><strong>配置好网站信息后，接着在nginx启用该站点</strong></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">cd /etc/nginx/sites-enabled/ </div><div class="line">ln -s /etc/nginx/sites-available/baidu baidu</div></pre></td></tr></table></figure>
<p><strong>重启nginx</strong></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">sudo /etc/init.d/nginx restart</div></pre></td></tr></table></figure>
<p><strong>进入Django所在目录</strong></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">cd /path/to/django_dir</div><div class="line">python manage.py runserver</div></pre></td></tr></table></figure>
<p><strong>但是此方法一旦SSH断开连接 服务器也会关闭，可以使用 screen来保持服务器一直开启。</strong></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">sudo apt-get install screen</div><div class="line">screen python manage.py runserver</div></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      Django自带的 python manage.py runserver只提供测试用，到了实际生产环境中，需要使用nginx要做请求转发
    
    </summary>
    
    
      <category term="django" scheme="http://www.phbai.com/tags/django/"/>
    
      <category term="nginx" scheme="http://www.phbai.com/tags/nginx/"/>
    
      <category term="python" scheme="http://www.phbai.com/tags/python/"/>
    
  </entry>
  
</feed>
